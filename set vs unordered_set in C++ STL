set vs unordered_set in C++ STL
Pre-requisite : set in C++, unordered_set in C++

Differences :

                |     set             | unordered_set
---------------------------------------------------------
Ordering        | increasing  order   | no ordering
                | (by default)        |

Implementation  | Self balancing BST  | Hash Table
                | like Red-Black Tree |  

search time     | log(n)              | O(1) -> Average 
                |                     | O(n) -> Worst Case

Insertion time  | log(n) + Rebalance  | Same as search
                      
Deletion time   | log(n) + Rebalance  | Same as search
Use set when

We need ordered data.
We would have to print/access the data (in sorted order).
We need predecessor/successor of elements.
Since set is ordered, we can use functions like binary_search(), lower_bound() and upper_bound() on set elements. These functions cannot be used on unordered_set().
See advantages of BST over Hash Table for more cases.
Use unordered_set when

We need to keep a set of distinct elements and no ordering is required.
We need single element access i.e. no traversal.
Examples:

set:
Input  :  1, 8, 2, 5, 3, 9
Output :  1, 2, 3, 5, 8, 9

Unordered_set:
Input  : 1, 8, 2, 5, 3, 9
Output : 9 3 1 8 2 5 
If you want to look at implementation details of set and unordered_set in c++ STL, see Set Vs Map. Set allows to traverse elements in sorted order whereas Unordered_set doesnâ€™t allow to traverse elements in sorted order.

filter_none
edit
play_arrow

brightness_4
// Program to print elements of set 
#include <bits/stdc++.h> 
using namespace std; 
  
int main() 
{ 
    set<int> s; 
    s.insert(5); 
    s.insert(1); 
    s.insert(6); 
    s.insert(3); 
    s.insert(7); 
    s.insert(2); 
  
    cout << "Elements of set in sorted order: \n"; 
    for (auto it : s) 
        cout << it << " "; 
  
    return 0; 
} 
Output:
Elements of set in sorted order: 
1 2 3 5 6 7
filter_none
edit
play_arrow

brightness_4
// Program to print elements of set 
#include <bits/stdc++.h> 
using namespace std; 
  
int main() 
{ 
    unordered_set<int> s; 
    s.insert(5); 
    s.insert(1); 
    s.insert(6); 
    s.insert(3); 
    s.insert(7); 
    s.insert(2); 
  
    cout << "Elements of unordered_set: \n"; 
    for (auto it : s) 
        cout << it << " "; 
  
    return 0; 
} 
Output:
Elements of unordered_set: 
2 7 5 1 6 3
